if not modules then modules = { } end modules ['luageo'] = {
    version   = 1.000,
    comment   = "mp-geo rewrite",
    author    = "Gavin Polhemus",
    copyright = "Gavin Polhemus",
   license   = "see context related readme files"
}

  --% Load all of the data from the data files, converting latitude, longitude pairs to 3D points.
  datafolder = "data/"
  
  function latlonto3D (p) --% Takes a latitude, longitude pair (in MINUTES) and returns a 3D point on a unit sphere.
    local lat = p[1]/60
    local lon = p[2]/60
    local clat = math.cosd(lat)
    local p3D = {
      x = clat*math.cosd(lon),
      y = clat*math.sind(lon),
      z = math.sind(lat)
    }
    return p3D
  end
  
  countries = {} --% country table
  function Country (d) --% Reads continent data to make countries list with color = "color" and file = "file".
    countries[#countries+1] = d --% {color = "red", file = d.file}
  end
  dofile("data/Cameriquenord.dat")
  dofile("data/Ccaraibes.dat")
  dofile("data/Cameriquecentrale.dat")
  dofile("data/Cameriquesud.dat")
  dofile("data/Ceurope.dat")
  dofile("data/Casia.dat")
  dofile("data/Cafrique.dat")
  for i = 1, #countries do --% Uses data in "file" to add boundary3d to countries.
    local t = {} --% table of 3D boundary points
    for latstring, lonstring in string.gmatch(io.loaddata(datafolder .. countries[i].file),"%(([%+%-%d]+),([%+%-%d]+)%)") do
      t[#t+1] = latlonto3D{tonumber(latstring), tonumber(lonstring)}
    end
    countries[i] = {boundary3D = t}
  end
 
  islands = {} --% Island list containing color = "color" and boundary3D = {table} and maybe name = "name"..  
  function Island (d) --% Converts island data into 3D and puts into islands table.
    local t = {} --% table of 3D boundary points
    for p = 1, #d.boundary do
      t[p] = latlonto3D(d.boundary[p])
    end
    islands[#islands+1] = {color = d.color, boundary3D = t}
  end
  dofile("data/iles.dat")

  --% These functions are called each time a globe is made.
  function mp.makeglobe(Lat, Lon) --% Lua makes the globe and returns the number of paths
    cLat = math.cosd(Lat); sLat = math.sind(Lat)
    cLon = math.cosd(Lon); sLon = math.sind(Lon)
    globepaths = {}; globecolors = {}
    for i = 1, #countries do
      addpath(countries[i])
    end
    for i = 1, #islands do
      addpath(islands[i])
    end
    mp.inject.integer(#globepaths)
  end

  function mp.getglobepath(pathnum)
    mp.inject.path(globepaths[pathnum])
  end
  function mp.getglobecolor(pathnum)
    mp.inject.string(globecolors[pathnum])
  end
  
  function rotate(p3D)
    P3D = {
      y = p3D.y*cLon - p3D.x*sLon,
      x = (p3D.y*sLon + p3D.x*cLon)*cLat + p3D.z*sLat,
      z = -(p3D.y*sLon + p3D.x*cLon)*sLat + p3D.z*cLat
    }
    return P3D
  end
  
  function addpath(area) --% Make a path for the area and add it to the globepaths list.
    local f = { cycle = true } --% The path.
    for p=1, #area.boundary3D do
      view = rotate(area.boundary3D[p])--% Rotate the point area.boundary3D to new coordinates view={x, y, z}. 
      if view.x > 0 then --% If the point is on our side of the horizon, then it is added.
        f[#f+1] = {view.y, view.z} --% Project 3D view points to 2D path pairs and add to path
        if f.cut and f.visible then --% If the path is visible and currently being cut...
          closecut(f[#f-1],f[#f]) -- % add control points to previous point and current point...
          f.cut = nil --% and stop cutting.
        end
        f .visible = true --% Any visible point means the area is visible.
      else --% If the point is over the horizon, then it is not added and we note that this is a horizon cut. 
         if f.visible then f.cut = true else f.cutendtostart = true end --% We don't need to cut an area that isn't visible.
      end
    end
    if f.visible then --% A visible path needs to be closed and added to the globepaths list.
      if f.cut or f.cutendtostart then --% If we are in the middle of a cut, or if the path started with a cut...
        closecut(f[#f],f[1]) --% add control points to this point and first point.
      end
      f.visible = nil; f.cut = nil; f.cutendtostart = nil --% Clean up so this stuff isn't added to globepaths.
      globepaths[#globepaths+1] = f
      globecolors[#globepaths] = area.color
    end --% If the area is visible, add path to globepaths list.
  end
  
   --% Three vector operations
  function sum (u, v)
    return {u[1]+v[1], u[2]+v[2]}
  end

  function dif (u, v)
    return {u[1]-v[1], u[2]-v[2]}
  end
  
  function scale (a, v)
    return {a*v[1], a*v[2]}
  end
  
  function closecut(p,q) --% Close the cut from p to q with an arc (actually a cubic bezier, unfortunately).
    local X = sum(p, q) --% Basis vector bisecting angle pOq.
    local Y = dif(p, q) --% Orthogonal basis vector in plane pOq.
    
    local magX = math.sqrt( X[1]^2 + X[2]^2) --% The magnitude of X used in computing coefficients
    
    local C = 4/(3*magX) - 1/6 --% Coefficients for X and Y are not obvious!
    local D = ( 1 - magX/6 ) / (2 + magX)
    
    X = scale(C, X) --% Won't need the basis vectors again, so just scale them.
    Y = scale(D, Y)
    
    local Ac = sum(X, Y) --% control point for departure from p. 
    local Bc =dif(X, Y) --% control point for approach to q
  
    p[5] = Ac[1]; p[6] = Ac[2] --% Add control point for departure from p.
    q[3] = Bc[1]; q[4] = Bc[2] --% Add control point for approach to q.
  end
